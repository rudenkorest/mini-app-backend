const express = require('express');
const cors = require('cors');
const crypto = require('crypto');
require('dotenv').config();

// –Ü–º–ø–æ—Ä—Ç –±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –ª–æ–∫–∞—Ü—ñ–π
const LocationBot = require('./telegram-bot');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(express.json());
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:5173'],
  credentials: true
}));

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó Telegram WebApp –¥–∞–Ω–Ω–∏—Ö
function verifyTelegramWebAppData(initData, botToken) {
  try {
    const urlParams = new URLSearchParams(initData);
    const hash = urlParams.get('hash');
    urlParams.delete('hash');
    
    const dataCheckString = Array.from(urlParams.entries())
      .sort(([a], [b]) => a.localeCompare(b))
      .map(([key, value]) => `${key}=${value}`)
      .join('\n');
    
    const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest();
    const calculatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex');
    
    return calculatedHash === hash;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:', error);
    return false;
  }
}

// Endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
app.post('/api/check-subscription', async (req, res) => {
  try {
    const { userId, channel, initData } = req.body;
    
    if (!userId || !channel || !initData) {
      return res.status(400).json({ 
        error: '–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤' 
      });
    }
    
    // –í–µ—Ä–∏—Ñ—ñ–∫—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
    console.log('Received data:', { userId, channel, initData: initData ? 'present' : 'missing' });
    
    // –¢–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    // const isValid = verifyTelegramWebAppData(initData, process.env.BOT_TOKEN);
    // if (!isValid) {
    //   console.log('Verification failed for initData:', initData);
    //   return res.status(401).json({ 
    //     error: '–ù–µ–¥—ñ–π—Å–Ω—ñ –¥–∞–Ω—ñ Telegram' 
    //   });
    // }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram Bot API
    const response = await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/getChatMember`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: channel,
        user_id: userId
      })
    });
    
    const data = await response.json();
    
    console.log('Telegram API response:', data);
    
    if (!data.ok) {
      console.error('Telegram API –ø–æ–º–∏–ª–∫–∞:', data.description);
      return res.status(500).json({ 
        error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏',
        details: data.description 
      });
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫–∞–Ω–∞–ª—ñ
    const userStatus = data.result?.status;
    const isSubscribed = ['member', 'administrator', 'creator'].includes(userStatus);
    
    console.log(`User ${userId} status in channel: ${userStatus}, isSubscribed: ${isSubscribed}`);
    
    res.json({ 
      isSubscribed,
      status: userStatus 
    });
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –¢–µ—Å—Ç–æ–≤–∏–π endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    channel: process.env.TELEGRAM_CHANNEL 
  });
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${process.env.TELEGRAM_CHANNEL}`);
  
  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –ª–æ–∫–∞—Ü—ñ–π
  if (process.env.BOT_TOKEN && process.env.OPENAI_API_KEY) {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞—é Location Bot...');
    new LocationBot();
  } else {
    console.log('‚ö†Ô∏è Location Bot –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ - –≤—ñ–¥—Å—É—Ç–Ω—ñ BOT_TOKEN –∞–±–æ OPENAI_API_KEY');
  }
}); 