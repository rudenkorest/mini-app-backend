require('dotenv').config();
const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
const bot = new Telegraf(process.env.BOT_TOKEN);
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_ANON_KEY
);
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const TARGET_CHANNEL_ID = parseInt(process.env.PARSING_CHANNEL_ID) || -1001234567890; // –¢–µ—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª
const HASHTAG_FILTER = '#–∑–∞–∫–ª–∞–¥';

class LocationBot {
  constructor() {
    this.setupBot();
  }

  setupBot() {
    // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É
    bot.on('channel_post', (ctx) => {
      this.handleChannelPost(ctx);
    });

    // –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    bot.command('status', (ctx) => {
      ctx.reply('ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç—ñ–≤ –∑ #–∑–∞–∫–ª–∞–¥');
    });

    bot.command('test', async (ctx) => {
      const testText = `
üè™ –ù–æ–≤–∞ –ª–æ–∫–∞—Ü—ñ—è #–∑–∞–∫–ª–∞–¥

üìç Lavka Coffee
–ó–∞—Ç–∏—à–Ω–∞ –∫–∞–≤'—è—Ä–Ω—è –≤ —Ü–µ–Ω—Ç—Ä—ñ –º—ñ—Å—Ç–∞ –∑ –∞–≤—Ç–æ—Ä—Å—å–∫–∏–º–∏ –Ω–∞–ø–æ—è–º–∏ —Ç–∞ –¥–æ–º–∞—à–Ω—å–æ—é –≤–∏–ø—ñ—á–∫–æ—é.

üìç –ê–¥—Ä–µ—Å–∞: –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 25
      `;
      
      ctx.reply('üß™ –¢–µ—Å—Ç—É—é –æ–±—Ä–æ–±–∫—É —Ç–µ–∫—Å—Ç—É...');
      const result = await this.processWithChatGPT(testText);
      
      // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      result.link = this.generatePostLink({ message_id: 123 });
      
      ctx.reply(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n${JSON.stringify(result, null, 2)}`);
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.launch().then(() => {
      console.log('ü§ñ Location Bot –∑–∞–ø—É—â–µ–Ω–æ!');
      console.log(`üì∫ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª—É: ${TARGET_CHANNEL_ID}`);
      console.log(`üì∫ –ü—ñ–¥–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª—É: ${process.env.TELEGRAM_CHANNEL}`);
      console.log(`üè∑ –§—ñ–ª—å—Ç—Ä: ${HASHTAG_FILTER}`);
    });

    // Graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  }

  async handleChannelPost(ctx) {
    try {
      const message = ctx.channelPost || ctx.message;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–∞–Ω–∞–ª
      if (message.chat.id !== TARGET_CHANNEL_ID) {
        return;
      }

      const text = message.text || message.caption || '';
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ö–µ—à—Ç–µ–≥—É #–∑–∞–∫–ª–∞–¥
      if (!text.includes(HASHTAG_FILTER)) {
        console.log('üìù –ü–æ—Å—Ç –±–µ–∑ —Ö–µ—à—Ç–µ–≥—É #–∑–∞–∫–ª–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
        return;
      }

      console.log('üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç –∑ #–∑–∞–∫–ª–∞–¥!');
      console.log('üìù –¢–µ–∫—Å—Ç:', text.substring(0, 100) + '...');

      // –û—Ç—Ä–∏–º—É—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å
      const imageUrls = await this.extractImageUrls(message);
      console.log('üñº –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å:', imageUrls.length);

      // –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT
      const locationData = await this.processWithChatGPT(text);
      
      if (!locationData) {
        console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–µ–∫—Å—Ç');
        return;
      }

      // –î–æ–¥–∞—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ)
      locationData.avatar = imageUrls.length > 0 ? imageUrls[0] : null;

      // –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç
      locationData.link = this.generatePostLink(message);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Supabase
      await this.saveToSupabase(locationData);

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å—Ç–∞:', error);
    }
  }

  async extractImageUrls(message) {
    const imageUrls = [];

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ç–æ
      if (message.photo && message.photo.length > 0) {
        // –ë–µ—Ä–µ–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
        const largestPhoto = message.photo[message.photo.length - 1];
        const file = await bot.telegram.getFile(largestPhoto.file_id);
        const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
        imageUrls.push(imageUrl);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ
      if (message.media_group_id) {
        // –î–ª—è –º–µ–¥—ñ–∞-–≥—Ä—É–ø–∏ –º–æ–∂–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞
        console.log('üì∏ –ó–Ω–∞–π–¥–µ–Ω–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É, –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ (—è–∫—â–æ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
      if (message.document && message.document.mime_type && message.document.mime_type.startsWith('image/')) {
        const file = await bot.telegram.getFile(message.document.file_id);
        const imageUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
        imageUrls.push(imageUrl);
      }

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:', error);
    }

    return imageUrls;
  }

  generatePostLink(message) {
    try {
      // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ä–º—É—î—Ç—å—Å—è —è–∫ t.me/c/CHANNEL_ID/MESSAGE_ID
      // –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å -100 –∑ channel ID
      const channelId = Math.abs(TARGET_CHANNEL_ID).toString().substring(3);
      const messageId = message.message_id;
      
      const postLink = `https://t.me/c/${channelId}/${messageId}`;
      console.log(`üîó –ì–µ–Ω–µ—Ä—É—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç: ${postLink}`);
      
      return postLink;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', error);
      return null;
    }
  }

  async processWithChatGPT(text) {
    try {
      console.log('ü§ñ –û–±—Ä–æ–±–ª—è—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT...');

      const prompt = `–¢–∏ –º–∞—î—à —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ —Ç–µ–∫—Å—Ç–∏ —Ç–∞ –≤–∏–¥—ñ–ª—è—Ç–∏ –∑ –Ω—å–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ö—Ä–∏—Ç–µ—Ä—ñ—ó:

- –Ω–∞–∑–≤–∞ –∑–∞–∫–ª–∞–¥—É, –ª–æ–∫–∞—Ü—ñ—ó
- –æ–ø–∏—Å, —è–∫–∏–π –º–∞—î –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤—Å—é —Å—É—Ç—å —Ç–∞ —Ü—ñ–∫–∞–≤–∏–Ω–∫—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó, –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ —Ü—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤ –ø–µ—Ä—à–æ–º—É –∞–±–∑–∞—Ü—ñ, –º–∞–∫—Å–∏–º—É–º 10 —Å–ª—ñ–≤
- –∞–¥—Ä–µ—Å—É, —É —Ñ–æ—Ä–º–∞—Ç—ñ –ö–∏—ó–≤, –≤—É–ª. ***
- —à–∏—Ä–æ—Ç–∞ —Ç–∞ –¥–æ–≤–≥–æ—Ç–∞ —Ü—ñ—î—ó –∞–¥—Ä–µ—Å–∏

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£:
${text}

–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥–∞–π –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ:
{
  "title": "–Ω–∞–∑–≤–∞ –∑–∞–∫–ª–∞–¥—É",
  "description": "–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (–º–∞–∫—Å–∏–º—É–º 10 —Å–ª—ñ–≤)",
  "address": "–∞–¥—Ä–µ—Å–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –ö–∏—ó–≤, –≤—É–ª. ***",
  "latitude": 50.4501,
  "longitude": 30.5234
}

–î–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä–µ–∞–ª—å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∞–¥—Ä–µ—Å–∏ –≤ –ö–∏—î–≤—ñ. –Ø–∫—â–æ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç–æ—á–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –ø—Ä–∏–±–ª–∏–∑–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ä–∞–π–æ–Ω—É.`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: "system",
            content: "–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ–π –∑ —Ç–µ–∫—Å—Ç—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –Ω–∞–∑–≤ —Ç–∞ –æ–ø–∏—Å—ñ–≤."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 300,
        temperature: 0.1
      });

      const responseText = completion.choices[0].message.content.trim();
      console.log('ü§ñ ChatGPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', responseText);

      // –ü–∞—Ä—Å–∏–º–æ JSON
      let locationData;
      try {
        locationData = JSON.parse(responseText);
      } catch (e) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥ ChatGPT:', e);
        return null;
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      if (!locationData.title || !locationData.description || !locationData.address) {
        console.error('‚ùå –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ ChatGPT');
        return null;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (typeof locationData.latitude !== 'number' || typeof locationData.longitude !== 'number') {
        console.error('‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—ñ–¥ ChatGPT');
        // –ó–∞–¥–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä—É –ö–∏—î–≤–∞
        locationData.latitude = 50.4501;
        locationData.longitude = 30.5234;
      }

      return locationData;

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ ChatGPT:', error);
      return null;
    }
  }

  async saveToSupabase(locationData) {
    try {
      console.log('üíæ –ó–±–µ—Ä—ñ–≥–∞—é –≤ Supabase:', locationData);

      const record = {
        title: locationData.title,
        description: locationData.description,
        address: locationData.address,
        latitude: locationData.latitude,
        longitude: locationData.longitude,
        avatar: locationData.avatar,
        link: locationData.link, // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç
        is_active: true,
        created_at: new Date().toISOString()
      };

      const { data, error } = await supabase
        .from('locations')
        .insert(record)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase:', error);
        return false;
      }

      console.log('‚úÖ –õ–æ–∫–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ ID:', data.id);
      console.log('üìç', data.title, '-', data.address);
      console.log('üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç:', data.link);
      
      return true;

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
      return false;
    }
  }
}

module.exports = LocationBot; 