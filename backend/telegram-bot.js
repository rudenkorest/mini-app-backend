require('dotenv').config();
const { Telegraf } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');
const BroadcastManager = require('./broadcast-manager');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
const bot = new Telegraf(process.env.BOT_TOKEN);
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_ANON_KEY
);
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const TARGET_CHANNEL_ID = parseInt(process.env.PARSING_CHANNEL_ID) || -1001234567890; // –¢–µ—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª
const HASHTAG_FILTER = '#–∑–∞–∫–ª–∞–¥';

class LocationBot {
  constructor() {
    this.broadcastManager = new BroadcastManager(bot);
    this.setupBot();
  }

  setupBot() {
    // –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
    bot.start(async (ctx) => {
      await this.sendStartMessage(ctx);
    });

    // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É
    bot.on('channel_post', (ctx) => {
      this.handleChannelPost(ctx);
    });

    // –°–∏—Å—Ç–µ–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    bot.command('status', (ctx) => {
      ctx.reply('ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç—ñ–≤ –∑ #–∑–∞–∫–ª–∞–¥');
    });

    bot.command('test', async (ctx) => {
      const testText = `
üè™ –ù–æ–≤–∞ –ª–æ–∫–∞—Ü—ñ—è #–∑–∞–∫–ª–∞–¥

üìç Lavka Coffee
–ó–∞—Ç–∏—à–Ω–∞ –∫–∞–≤'—è—Ä–Ω—è –≤ —Ü–µ–Ω—Ç—Ä—ñ –º—ñ—Å—Ç–∞ –∑ –∞–≤—Ç–æ—Ä—Å—å–∫–∏–º–∏ –Ω–∞–ø–æ—è–º–∏ —Ç–∞ –¥–æ–º–∞—à–Ω—å–æ—é –≤–∏–ø—ñ—á–∫–æ—é.

üìç –ê–¥—Ä–µ—Å–∞: –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 25
      `;
      
      ctx.reply('üß™ –¢–µ—Å—Ç—É—é –æ–±—Ä–æ–±–∫—É —Ç–µ–∫—Å—Ç—É...');
      const result = await this.processWithChatGPT(testText);
      
      // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      result.link = this.generatePostLink({ message_id: 123 });
      
      ctx.reply(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n${JSON.stringify(result, null, 2)}`);
    });

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∏ –±—É–¥—å-—è–∫—ñ–π –≤–∑–∞—î–º–æ–¥—ñ—ó
    bot.use(async (ctx, next) => {
      await this.broadcastManager.saveUser(ctx);
      return next();
    });

    // –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–∑—Å–∏–ª–æ–∫
    bot.command('broadcast', async (ctx) => {
      if (!this.broadcastManager.isAdmin(ctx.from.id)) {
        return ctx.reply('‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
      }
      
      this.broadcastManager.startInteractiveBroadcast(ctx.from.id);
      ctx.reply(`üì¢ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!

üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.

üí° –ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:
‚Ä¢ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (<b>–∂–∏—Ä–Ω–∏–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>)
‚Ä¢ –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ (—Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∏)
‚Ä¢ –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É –∑ –º–µ–¥—ñ–∞

üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!`);
    });

    bot.command('stats', async (ctx) => {
      if (!this.broadcastManager.isAdmin(ctx.from.id)) {
        return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ');
      }

      const stats = await this.broadcastManager.getUserStats();
      ctx.reply(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
üë• –í—Å—å–æ–≥–æ: ${stats.total}
‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: ${stats.active}
‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: ${stats.inactive}`);
    });

    // –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
    bot.on('message', async (ctx) => {
      if (!this.broadcastManager.isAdmin(ctx.from.id)) {
        return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ-–∞–¥–º—ñ–Ω—ñ–≤
      }

      // –°–ø—Ä–æ–±—É—î–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ —á–∞—Å—Ç–∏–Ω—É —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
      const handled = await this.broadcastManager.handleBroadcastMessage(ctx);
      
      if (!handled) {
        // –Ø–∫—â–æ –Ω–µ –æ–±—Ä–æ–±–∏–ª–∏ —è–∫ —Ä–æ–∑—Å–∏–ª–∫—É, –ø–æ–∫–∞–∑—É—î–º–æ –¥–æ–≤—ñ–¥–∫—É
        if (ctx.message.text && !ctx.message.text.startsWith('/')) {
          ctx.reply(`üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /broadcast –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏`);
        }
      }
    });

    // –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    bot.on('callback_query', async (ctx) => {
      if (!this.broadcastManager.isAdmin(ctx.from.id)) {
        await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ');
        return;
      }

      await this.broadcastManager.handleCallback(ctx);
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.launch().then(() => {
      console.log('ü§ñ Location Bot –∑–∞–ø—É—â–µ–Ω–æ!');
      console.log(`üì∫ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª—É: ${TARGET_CHANNEL_ID}`);
      console.log(`üì∫ –ü—ñ–¥–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª—É: ${process.env.TELEGRAM_CHANNEL}`);
      console.log(`üè∑ –§—ñ–ª—å—Ç—Ä: ${HASHTAG_FILTER}`);
    });

    // Graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  }

  async sendStartMessage(ctx) {
    try {
      const welcomeText = `<b>–¶–µ –∫–∞—Ä—Ç–∞ –≤—ñ–¥ <a href="https://t.me/+8Bui7KD5WrJiZjli">¬´–ì—É–ª—è–π, –ö–∏—ó–≤¬ª</a>, —è–∫–∞ –ø–æ–∫–∞–∂–µ, –¥–µ –≤ —Å—Ç–æ–ª–∏—Ü—ñ –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à–µ!</b>

–¢—É—Ç —É—Å–µ –ø—Ä–æ—Å—Ç–æ:
üìç –ó–Ω–∞—Ö–æ–¥—å –∑–∞–∫–ª–∞–¥–∏, –ª–æ–∫–∞—Ü—ñ—ó —Ç–∞ –ø–æ–¥—ñ—ó –ø–æ—Ä—É—á —ñ–∑ —Å–æ–±–æ—é.
üî• –û–±–∏—Ä–∞–π —ñ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –º—ñ—Å—Ü—å ‚Äì —Ç—É—Ç –ª–∏—à–µ —Ç—ñ, –ø—Ä–æ —è–∫—ñ –≥–æ–≤–æ—Ä—è—Ç—å —É TikTok, Instagram —ñ –Ω–∞ –≤—É–ª–∏—Ü—è—Ö
üîç –î–æ—Å–ª—ñ–¥–∂—É–π –º—ñ—Å—Ç–æ –ø–æ-–Ω–æ–≤–æ–º—É ‚Äì –±–µ–∑ –∑–∞–π–≤–∏—Ö —Ä–æ–∑–¥—É–º—ñ–≤ ¬´–∫—É–¥–∏ –ø—ñ—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ¬ª.

–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –∫–∞—Ä—Ç—É  ‚¨áÔ∏è`;

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏
      await ctx.replyWithPhoto(
        'https://tkvtshoprhmgjrgvaeia.supabase.co/storage/v1/object/public/location-images/system%20images/Frame%201686561270.png',
        {
          caption: welcomeText,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üó∫Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É',
                  web_app: { url: 'https://map.gulyai-kyiv.com' }
                }
              ]
            ]
          }
        }
      );

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥—Ä—É–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
      setTimeout(async () => {
        try {
          const subscribeText = `<b>üì≤ –©–æ–± –±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ –π –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—å –ø—Ä–æ –≤—Å—ñ —Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ö–∏—î–≤–∞ ‚Äì –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href="https://t.me/+8Bui7KD5WrJiZjli">¬´–ì—É–ª—è–π, –ö–∏—ó–≤¬ª</a></b>`;

          await ctx.reply(subscribeText, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üì≤ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
                    url: 'https://t.me/+8Bui7KD5WrJiZjli'
                  }
                ]
              ]
            }
          });
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
      }, 3000); // 3 —Å–µ–∫—É–Ω–¥–∏ –∑–∞—Ç—Ä–∏–º–∫–∞

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      // Fallback - –∑–≤–∏—á–∞–π–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      ctx.reply('üó∫Ô∏è –í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /status –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞.');
    }
  }

  async handleChannelPost(ctx) {
    try {
      const message = ctx.channelPost || ctx.message;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–∞–Ω–∞–ª
      if (message.chat.id !== TARGET_CHANNEL_ID) {
        return;
      }

      const text = message.text || message.caption || '';
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ö–µ—à—Ç–µ–≥—É #–∑–∞–∫–ª–∞–¥
      if (!text.includes(HASHTAG_FILTER)) {
        console.log('üìù –ü–æ—Å—Ç –±–µ–∑ —Ö–µ—à—Ç–µ–≥—É #–∑–∞–∫–ª–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ');
        return;
      }

      console.log('üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç –∑ #–∑–∞–∫–ª–∞–¥!');
      console.log('üìù –¢–µ–∫—Å—Ç:', text.substring(0, 100) + '...');

      // –û—Ç—Ä–∏–º—É—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å
      const imageUrls = await this.extractImageUrls(message);
      console.log('üñº –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å:', imageUrls.length);

      // –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT
      const locationData = await this.processWithChatGPT(text);
      
      if (!locationData) {
        console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–µ–∫—Å—Ç');
        return;
      }

      // –î–æ–¥–∞—î–º–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ)
      locationData.avatar = imageUrls.length > 0 ? imageUrls[0] : null;

      // –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç
      locationData.link = this.generatePostLink(message);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Supabase
      await this.saveToSupabase(locationData);

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å—Ç–∞:', error);
    }
  }

  async extractImageUrls(message) {
    const imageUrls = [];

    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ç–æ
      if (message.photo && message.photo.length > 0) {
        const largestPhoto = message.photo[message.photo.length - 1];
        const uploadedUrl = await this.downloadAndUploadImage(largestPhoto.file_id);
        if (uploadedUrl) imageUrls.push(uploadedUrl);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–ª—å–±–æ–º —Ñ–æ—Ç–æ
      if (message.media_group_id) {
        console.log('üì∏ –ó–Ω–∞–π–¥–µ–Ω–æ –º–µ–¥—ñ–∞-–≥—Ä—É–ø—É, –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ');
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ (—è–∫—â–æ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
      if (message.document && message.document.mime_type && message.document.mime_type.startsWith('image/')) {
        const uploadedUrl = await this.downloadAndUploadImage(message.document.file_id);
        if (uploadedUrl) imageUrls.push(uploadedUrl);
      }

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:', error);
    }

    return imageUrls;
  }

  // –ù–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤ Supabase
  async downloadAndUploadImage(fileId) {
    try {
      // 1. –û—Ç—Ä–∏–º—É—î–º–æ file_path –≤—ñ–¥ Telegram
      const file = await bot.telegram.getFile(fileId);
      const telegramUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
      
      // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
      const fetch = (await import('node-fetch')).default;
      const response = await fetch(telegramUrl);
      if (!response.ok) throw new Error(`HTTP ${response.status}`);
      
      const buffer = await response.buffer();
      
      // 3. –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
      const fileName = `avatars/${Date.now()}_${Math.random().toString(36).substring(7)}.jpg`;
      
      // 4. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤ Supabase Storage
      const { data, error } = await supabase.storage
        .from('location-images')
        .upload(fileName, buffer, {
          contentType: 'image/jpeg',
          cacheControl: '31536000' // 1 —Ä—ñ–∫ –∫–µ—à—É–≤–∞–Ω–Ω—è
        });

      if (error) throw error;

      // 5. –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL
      const { data: urlData } = supabase.storage
        .from('location-images')
        .getPublicUrl(fileName);

      console.log(`‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${urlData.publicUrl}`);
      return urlData.publicUrl;

    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${fileId}:`, error);
      return null;
    }
  }

  generatePostLink(message) {
    try {
      // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ä–º—É—î—Ç—å—Å—è —è–∫ t.me/c/CHANNEL_ID/MESSAGE_ID
      // –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å -100 –∑ channel ID
      const channelId = Math.abs(TARGET_CHANNEL_ID).toString().substring(3);
      const messageId = message.message_id;
      
      const postLink = `https://t.me/c/${channelId}/${messageId}`;
      console.log(`üîó –ì–µ–Ω–µ—Ä—É—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç: ${postLink}`);
      
      return postLink;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', error);
      return null;
    }
  }

  async processWithChatGPT(text) {
    try {
      console.log('ü§ñ –û–±—Ä–æ–±–ª—è—é —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ ChatGPT...');

      const prompt = `–¢–∏ –º–∞—î—à —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ —Ç–µ–∫—Å—Ç–∏ —Ç–∞ –≤–∏–¥—ñ–ª—è—Ç–∏ –∑ –Ω—å–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ñ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ö—Ä–∏—Ç–µ—Ä—ñ—ó:

- –Ω–∞–∑–≤–∞ –∑–∞–∫–ª–∞–¥—É, –ª–æ–∫–∞—Ü—ñ—ó
- –æ–ø–∏—Å, —è–∫–∏–π –º–∞—î –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤—Å—é —Å—É—Ç—å —Ç–∞ —Ü—ñ–∫–∞–≤–∏–Ω–∫—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó, –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ —Ü—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤ –ø–µ—Ä—à–æ–º—É –∞–±–∑–∞—Ü—ñ, –∑–∞–≤–∂–¥–∏ –Ω–∞–º–∞–≥–∞—Ç–∏—Å—è –æ–ø–∏—Å–∞—Ç–∏ 10 —Å–ª–æ–≤–∞–º–∏, –ø–µ—Ä—à–µ —Å–ª–æ–≤–∞ –º–∞—î –±—É—Ç–∏ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏.
- –∞–¥—Ä–µ—Å—É, —É —Ñ–æ—Ä–º–∞—Ç—ñ –ö–∏—ó–≤, –≤—É–ª. ***

–¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–Ü–ó–£:
${text}

–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥–∞–π –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ:
{
  "title": "–Ω–∞–∑–≤–∞ –∑–∞–∫–ª–∞–¥—É",
  "description": "–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (–º–∞–∫—Å–∏–º—É–º 10 —Å–ª—ñ–≤)",
  "address": "–∞–¥—Ä–µ—Å–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –ö–∏—ó–≤, –≤—É–ª. ***"
}

–í–ê–ñ–õ–ò–í–û: –ù–µ –¥–æ–¥–∞–≤–∞–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ - –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –æ—Ç—Ä–∏–º–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ Google Maps API.`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: "system",
            content: "–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ–π –∑ —Ç–µ–∫—Å—Ç—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è –Ω–∞–∑–≤ —Ç–∞ –æ–ø–∏—Å—ñ–≤."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 300,
        temperature: 0.1
      });

      const responseText = completion.choices[0].message.content.trim();
      console.log('ü§ñ ChatGPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', responseText);

      // –ü–∞—Ä—Å–∏–º–æ JSON
      let locationData;
      try {
        locationData = JSON.parse(responseText);
      } catch (e) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON –≤—ñ–¥ ChatGPT:', e);
        return null;
      }

      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      if (!locationData.title || !locationData.description || !locationData.address) {
        console.error('‚ùå –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ ChatGPT');
        return null;
      }

      // –ì–µ–æ–∫–æ–¥—É—î–º–æ –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ Google Maps API
      console.log('üó∫Ô∏è –û—Ç—Ä–∏–º—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —á–µ—Ä–µ–∑ Google Maps API...');
      const coords = await this.geocodeAddress(locationData.address);
      
      if (coords) {
        locationData.latitude = coords.latitude;
        locationData.longitude = coords.longitude;
        console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ: ${coords.latitude}, ${coords.longitude}`);
      } else {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ñ');
        locationData.latitude = 50.4501;
        locationData.longitude = 30.5234;
      }

      return locationData;

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ ChatGPT:', error);
      return null;
    }
  }

  // –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è
  async geocodeAddress(address) {
    try {
      console.log('üó∫Ô∏è –ì–µ–æ–∫–æ–¥—É—é –∞–¥—Ä–µ—Å—É —á–µ—Ä–µ–∑ Google Maps API:', address);
      
      // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ GOOGLE_MAPS_API_KEY –≤ .env
      const apiKey = process.env.GOOGLE_MAPS_API_KEY;
      if (!apiKey) {
        console.error('‚ùå GOOGLE_MAPS_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env');
        return null;
      }
      
      const response = await fetch(
        `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address + ', Kyiv, Ukraine')}&key=${apiKey}`
      );
      
      const data = await response.json();
      
      if (data.status === 'OK' && data.results.length > 0) {
        const location = data.results[0].geometry.location;
        const coords = {
          latitude: location.lat,
          longitude: location.lng
        };
        console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${coords.latitude}, ${coords.longitude}`);
        return coords;
      } else {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:', data.status);
        return null;
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è:', error);
      return null;
    }
  }

  async saveToSupabase(locationData) {
    try {
      console.log('üíæ –ó–±–µ—Ä—ñ–≥–∞—é –≤ Supabase:', locationData);

      const record = {
        title: locationData.title,
        description: locationData.description,
        address: locationData.address,
        latitude: locationData.latitude,
        longitude: locationData.longitude,
        avatar: locationData.avatar,
        link: locationData.link, // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç
        is_active: true,
        created_at: new Date().toISOString()
      };

      const { data, error } = await supabase
        .from('locations')
        .insert(record)
        .select()
        .single();

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Supabase:', error);
        return false;
      }

      console.log('‚úÖ –õ–æ–∫–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ ID:', data.id);
      console.log('üìç', data.title, '-', data.address);
      console.log('üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Å—Ç:', data.link);
      
      return true;

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
      return false;
    }
  }
}

module.exports = LocationBot; 