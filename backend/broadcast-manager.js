require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_ANON_KEY
);

class BroadcastManager {
  constructor(bot) {
    this.bot = bot;
    this.pendingBroadcasts = new Map(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
    this.isAdmin = (userId) => {
      const adminIds = process.env.ADMIN_IDS?.split(',').map(id => parseInt(id)) || [];
      return adminIds.includes(userId);
    };
  }

  // –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
  startInteractiveBroadcast(userId) {
    this.pendingBroadcasts.set(userId, {
      step: 'waiting_message',
      title: '',
      message: '',
      entities: [],
      media: null,
      button_text: null,
      button_url: null
    });
  }

  // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω–∞
  async handleBroadcastMessage(ctx) {
    const userId = ctx.from.id;
    const pending = this.pendingBroadcasts.get(userId);
    
    if (!pending) return false; // –ù–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏

    if (pending.step === 'waiting_message') {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –º–µ–¥—ñ–∞
      pending.message = ctx.message.text || ctx.message.caption || '';
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ entities –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
      pending.entities = ctx.message.entities || ctx.message.caption_entities || [];
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ –º–µ–¥—ñ–∞ —è–∫—â–æ —î
      if (ctx.message.photo) {
        pending.media = {
          type: 'photo',
          file_id: ctx.message.photo[ctx.message.photo.length - 1].file_id
        };
      } else if (ctx.message.video) {
        pending.media = {
          type: 'video', 
          file_id: ctx.message.video.file_id
        };
      } else if (ctx.message.document) {
        pending.media = {
          type: 'document',
          file_id: ctx.message.document.file_id
        };
      } else if (ctx.message.audio) {
        pending.media = {
          type: 'audio',
          file_id: ctx.message.audio.file_id
        };
      } else if (ctx.message.voice) {
        pending.media = {
          type: 'voice',
          file_id: ctx.message.voice.file_id
        };
      } else if (ctx.message.animation) {
        pending.media = {
          type: 'animation',
          file_id: ctx.message.animation.file_id
        };
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –∫–Ω–æ–ø–∫–∏
      pending.step = 'waiting_button_choice';
      
      await ctx.reply('üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\nüîò –•–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–æ —Ü—ñ—î—ó —Ä–æ–∑—Å–∏–ª–∫–∏?', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –¢–∞–∫, –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É', callback_data: 'btn_add_button' },
              { text: '‚ùå –ù—ñ, –±–µ–∑ –∫–Ω–æ–ø–∫–∏', callback_data: 'btn_no_button' }
            ]
          ]
        }
      });
      
      return true;
    }
    
    if (pending.step === 'waiting_button_text') {
      const parts = ctx.message.text.split(' | ');
      if (parts.length !== 2) {
        await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç: [–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏] | [–ü–æ—Å–∏–ª–∞–Ω–Ω—è]\n\n–ü—Ä–∏–∫–ª–∞–¥: –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ | https://t.me/channel');
        return true;
      }
      
      pending.button_text = parts[0].trim();
      pending.button_url = parts[1].trim();
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤ º—é —Ç–∞ —Ñ—ñ–Ω–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏
      await this.showBroadcastPreview(ctx, pending);
      return true;
    }

    return false;
  }

  // –ü–æ–∫–∞–∑ –ø—Ä–µ–≤ º—é —Ä–æ–∑—Å–∏–ª–∫–∏
  async showBroadcastPreview(ctx, pending) {
    await ctx.reply('üìã –ü—Ä–µ–≤ º—é —Ä–æ–∑—Å–∏–ª–∫–∏:\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –±—É–¥–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const messageOptions = {};
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ entities —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ HTML
    if (pending.entities && pending.entities.length > 0) {
      messageOptions.entities = pending.entities;
    } else {
      messageOptions.parse_mode = 'HTML';
    }
    
    if (pending.button_text && pending.button_url) {
      messageOptions.reply_markup = {
        inline_keyboard: [[
          { text: pending.button_text, url: pending.button_url }
        ]]
      };
    }
    
    if (pending.media) {
      messageOptions.caption = pending.message;
      
      // –î–ª—è –º–µ–¥—ñ–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ caption_entities
      if (pending.entities && pending.entities.length > 0) {
        messageOptions.caption_entities = pending.entities;
        delete messageOptions.entities;
        delete messageOptions.parse_mode;
      }
      
      switch (pending.media.type) {
        case 'photo':
          await ctx.replyWithPhoto(pending.media.file_id, messageOptions);
          break;
        case 'video':
          await ctx.replyWithVideo(pending.media.file_id, messageOptions);
          break;
        case 'document':
          await ctx.replyWithDocument(pending.media.file_id, messageOptions);
          break;
        case 'audio':
          await ctx.replyWithAudio(pending.media.file_id, messageOptions);
          break;
        case 'voice':
          await ctx.replyWithVoice(pending.media.file_id, messageOptions);
          break;
        case 'animation':
          await ctx.replyWithAnimation(pending.media.file_id, messageOptions);
          break;
      }
    } else {
      await ctx.reply(pending.message, messageOptions);
    }
    
    // –§—ñ–Ω–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏
    await ctx.reply('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüöÄ –ì–æ—Ç–æ–≤—ñ –¥–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏?', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üì¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º', callback_data: 'btn_send_broadcast' },
            { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'btn_cancel_broadcast' }
          ]
        ]
      }
    });
    
    pending.step = 'waiting_final_action';
  }

  // –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
  async handleCallback(ctx) {
    const userId = ctx.from.id;
    const data = ctx.callbackQuery.data;
    const pending = this.pendingBroadcasts.get(userId);
    
    if (!pending) {
      await ctx.answerCbQuery('‚ùå –°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞');
      return;
    }
    
    if (data === 'btn_add_button') {
      pending.step = 'waiting_button_text';
      await ctx.editMessageText('üîò –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ:\n[–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏] | [–ü–æ—Å–∏–ª–∞–Ω–Ω—è]\n\n–ü—Ä–∏–∫–ª–∞–¥:\n–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ | https://t.me/channel');
      await ctx.answerCbQuery();
      
    } else if (data === 'btn_no_button') {
      await this.showBroadcastPreview(ctx, pending);
      await ctx.answerCbQuery();
      
    } else if (data === 'btn_send_broadcast') {
      await ctx.editMessageText('üì¢ –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É...');
      await this.executeBroadcast(ctx, pending);
      await ctx.answerCbQuery();
      
    } else if (data === 'btn_cancel_broadcast') {
      this.pendingBroadcasts.delete(userId);
      await ctx.editMessageText('‚ùå –†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
      await ctx.answerCbQuery();
    }
  }

  // –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
  async executeBroadcast(ctx, pending) {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ –±–∞–∑—ñ
      const broadcast = await this.createBroadcast(
        `–†–æ–∑—Å–∏–ª–∫–∞ ${new Date().toLocaleString('uk-UA')}`,
        pending.message,
        pending.button_text,
        pending.button_url,
        pending.media?.type,
        pending.media?.file_id,
        pending.message, // mediaCaption
        pending.entities // entities
      );

      if (broadcast) {
        await this.startBroadcast(broadcast.id, ctx.from.id);
        this.pendingBroadcasts.delete(ctx.from.id);
      } else {
        await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏');
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏:', error);
      await ctx.reply(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
  }

  // –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –ø–µ—Ä—à—ñ–π –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º
  async saveUser(ctx) {
    try {
      const user = ctx.from;
      if (!user || user.is_bot) return;

      const userData = {
        telegram_id: user.id,
        username: user.username || null,
        first_name: user.first_name || null,
        last_name: user.last_name || null,
        language_code: user.language_code || 'uk',
        last_interaction: new Date().toISOString()
      };

      // –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const { error } = await supabase
        .from('bot_users')
        .upsert(userData, { 
          onConflict: 'telegram_id',
          ignoreDuplicates: false 
        });

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      } else {
        console.log(`üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π: ${user.first_name} (@${user.username})`);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ saveUser:', error);
    }
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
  async createBroadcast(title, message, buttonText = null, buttonUrl = null, mediaType = null, mediaUrl = null, mediaCaption = null, entities = null) {
    try {
      const { data, error } = await supabase
        .from('broadcasts')
        .insert({
          title,
          message,
          button_text: buttonText,
          button_url: buttonUrl,
          media_type: mediaType,
          media_url: mediaUrl,
          media_caption: mediaCaption,
          entities: entities ? JSON.stringify(entities) : null,
          status: 'draft'
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏:', error);
      return null;
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏
  async startBroadcast(broadcastId, adminUserId) {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
      const { data: broadcast, error: broadcastError } = await supabase
        .from('broadcasts')
        .select('*')
        .eq('id', broadcastId)
        .single();

      if (broadcastError || !broadcast) {
        throw new Error('–†–æ–∑—Å–∏–ª–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
      const { data: users, error: usersError } = await supabase
        .from('bot_users')
        .select('telegram_id')
        .eq('is_active', true);

      if (usersError) throw usersError;

      console.log(`üì¢ –ü–æ—á–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É "${broadcast.title}" –¥–ª—è ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–∫–∏
      await supabase
        .from('broadcasts')
        .update({ 
          status: 'sending', 
          total_users: users.length
        })
        .eq('id', broadcastId);

      // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫
      await this.bot.telegram.sendMessage(
        adminUserId,
        `üì¢ –†–æ–∑—Å–∏–ª–∫–∞ "${broadcast.title}" —Ä–æ–∑–ø–æ—á–∞—Ç–∞!\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${users.length}`
      );

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
      let sentCount = 0;
      let failedCount = 0;

      for (const user of users) {
        try {
          await this.sendBroadcastMessage(user.telegram_id, broadcast);
          sentCount++;
          
          // –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (Telegram rate limits)
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (error) {
          failedCount++;
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.telegram_id}:`, error.message);
          
          // –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π (403 Forbidden)
          if (error.response && error.response.error_code === 403) {
            try {
              await supabase
                .from('bot_users')
                .update({ is_active: false })
                .eq('telegram_id', user.telegram_id);
              
              console.log(`üî¥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.telegram_id} –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π (–±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π)`);
            } catch (dbError) {
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user.telegram_id}:`, dbError);
            }
          }
        }
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await supabase
        .from('broadcasts')
        .update({ 
          status: 'completed',
          sent_count: sentCount,
          failed_count: failedCount
        })
        .eq('id', broadcastId);

      // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞ –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      await this.bot.telegram.sendMessage(
        adminUserId,
        `‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}\n‚ùå –ü–æ–º–∏–ª–æ–∫: ${failedCount}`
      );

      return { sentCount, failedCount };

    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏:', error);
      
      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É —è–∫ –Ω–µ–≤–¥–∞–ª—É
      await supabase
        .from('broadcasts')
        .update({ status: 'failed' })
        .eq('id', broadcastId);

      throw error;
    }
  }

  // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
  async sendBroadcastMessage(userId, broadcast) {
    const messageOptions = {};

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ entities —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ HTML
    if (broadcast.entities) {
      try {
        const entities = typeof broadcast.entities === 'string' 
          ? JSON.parse(broadcast.entities) 
          : broadcast.entities;
        
        if (entities && entities.length > 0) {
          messageOptions.entities = entities;
        } else {
          messageOptions.parse_mode = 'HTML';
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É entities:', error);
        messageOptions.parse_mode = 'HTML';
      }
    } else {
      messageOptions.parse_mode = 'HTML';
    }

    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —è–∫—â–æ —î
    if (broadcast.button_text && broadcast.button_url) {
      messageOptions.reply_markup = {
        inline_keyboard: [[
          { text: broadcast.button_text, url: broadcast.button_url }
        ]]
      };
    }

    // –Ø–∫—â–æ —î –º–µ–¥—ñ–∞ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –º–µ–¥—ñ–∞
    if (broadcast.media_type && broadcast.media_url) {
      const caption = broadcast.media_caption || broadcast.message;
      messageOptions.caption = caption;

      // –î–ª—è –º–µ–¥—ñ–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ caption_entities
      if (broadcast.entities) {
        try {
          const entities = typeof broadcast.entities === 'string' 
            ? JSON.parse(broadcast.entities) 
            : broadcast.entities;
          
          if (entities && entities.length > 0) {
            messageOptions.caption_entities = entities;
            delete messageOptions.entities;
            delete messageOptions.parse_mode;
          }
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É entities –¥–ª—è –º–µ–¥—ñ–∞:', error);
        }
      }

      switch (broadcast.media_type) {
        case 'photo':
          await this.bot.telegram.sendPhoto(userId, broadcast.media_url, messageOptions);
          break;
        case 'video':
          await this.bot.telegram.sendVideo(userId, broadcast.media_url, messageOptions);
          break;
        case 'document':
          await this.bot.telegram.sendDocument(userId, broadcast.media_url, messageOptions);
          break;
        case 'audio':
          await this.bot.telegram.sendAudio(userId, broadcast.media_url, messageOptions);
          break;
        case 'voice':
          await this.bot.telegram.sendVoice(userId, broadcast.media_url, messageOptions);
          break;
        case 'animation':
          await this.bot.telegram.sendAnimation(userId, broadcast.media_url, messageOptions);
          break;
        default:
          // –Ø–∫—â–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –º–µ–¥—ñ–∞ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          await this.bot.telegram.sendMessage(userId, broadcast.message, messageOptions);
      }
    } else {
      // –ë–µ–∑ –º–µ–¥—ñ–∞ - –∑–≤–∏—á–∞–π–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      await this.bot.telegram.sendMessage(userId, broadcast.message, messageOptions);
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  async getUserStats() {
    try {
      const { data, error } = await supabase
        .from('bot_users')
        .select('is_active');

      if (error) throw error;

      const total = data.length;
      const active = data.filter(u => u.is_active).length;
      const inactive = total - active;

      return { total, active, inactive };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return { total: 0, active: 0, inactive: 0 };
    }
  }
}

module.exports = BroadcastManager;